/*
xpan

xpanapi

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Uinforesponse struct for Uinforesponse
type Uinforesponse struct {
	Errno       *int32  `json:"errno,omitempty"`
	Errmsg      *string `json:"errmsg,omitempty"`
	Uk          *int32  `json:"uk,omitempty"`
	RequestId   *string `json:"request_id,omitempty"`
	AvatarUrl   *string `json:"avatar_url,omitempty"`
	BaiduName   *string `json:"baidu_name,omitempty"`
	NetdiskName *string `json:"netdisk_name,omitempty"`
	VipType     *int32  `json:"vip_type,omitempty"`
}

// NewUinforesponse instantiates a new Uinforesponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUinforesponse() *Uinforesponse {
	this := Uinforesponse{}
	return &this
}

// NewUinforesponseWithDefaults instantiates a new Uinforesponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUinforesponseWithDefaults() *Uinforesponse {
	this := Uinforesponse{}
	return &this
}

// GetErrno returns the Errno field value if set, zero value otherwise.
func (o *Uinforesponse) GetErrno() int32 {
	if o == nil || o.Errno == nil {
		var ret int32
		return ret
	}
	return *o.Errno
}

// GetErrnoOk returns a tuple with the Errno field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uinforesponse) GetErrnoOk() (*int32, bool) {
	if o == nil || o.Errno == nil {
		return nil, false
	}
	return o.Errno, true
}

// HasErrno returns a boolean if a field has been set.
func (o *Uinforesponse) HasErrno() bool {
	if o != nil && o.Errno != nil {
		return true
	}

	return false
}

// SetErrno gets a reference to the given int32 and assigns it to the Errno field.
func (o *Uinforesponse) SetErrno(v int32) {
	o.Errno = &v
}

// GetErrmsg returns the Errmsg field value if set, zero value otherwise.
func (o *Uinforesponse) GetErrmsg() string {
	if o == nil || o.Errmsg == nil {
		var ret string
		return ret
	}
	return *o.Errmsg
}

// GetErrmsgOk returns a tuple with the Errmsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uinforesponse) GetErrmsgOk() (*string, bool) {
	if o == nil || o.Errmsg == nil {
		return nil, false
	}
	return o.Errmsg, true
}

// HasErrmsg returns a boolean if a field has been set.
func (o *Uinforesponse) HasErrmsg() bool {
	if o != nil && o.Errmsg != nil {
		return true
	}

	return false
}

// SetErrmsg gets a reference to the given string and assigns it to the Errmsg field.
func (o *Uinforesponse) SetErrmsg(v string) {
	o.Errmsg = &v
}

// GetUk returns the Uk field value if set, zero value otherwise.
func (o *Uinforesponse) GetUk() int32 {
	if o == nil || o.Uk == nil {
		var ret int32
		return ret
	}
	return *o.Uk
}

// GetUkOk returns a tuple with the Uk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uinforesponse) GetUkOk() (*int32, bool) {
	if o == nil || o.Uk == nil {
		return nil, false
	}
	return o.Uk, true
}

// HasUk returns a boolean if a field has been set.
func (o *Uinforesponse) HasUk() bool {
	if o != nil && o.Uk != nil {
		return true
	}

	return false
}

// SetUk gets a reference to the given int32 and assigns it to the Uk field.
func (o *Uinforesponse) SetUk(v int32) {
	o.Uk = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *Uinforesponse) GetRequestId() string {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uinforesponse) GetRequestIdOk() (*string, bool) {
	if o == nil || o.RequestId == nil {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *Uinforesponse) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *Uinforesponse) SetRequestId(v string) {
	o.RequestId = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *Uinforesponse) GetAvatarUrl() string {
	if o == nil || o.AvatarUrl == nil {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uinforesponse) GetAvatarUrlOk() (*string, bool) {
	if o == nil || o.AvatarUrl == nil {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *Uinforesponse) HasAvatarUrl() bool {
	if o != nil && o.AvatarUrl != nil {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *Uinforesponse) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetBaiduName returns the BaiduName field value if set, zero value otherwise.
func (o *Uinforesponse) GetBaiduName() string {
	if o == nil || o.BaiduName == nil {
		var ret string
		return ret
	}
	return *o.BaiduName
}

// GetBaiduNameOk returns a tuple with the BaiduName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uinforesponse) GetBaiduNameOk() (*string, bool) {
	if o == nil || o.BaiduName == nil {
		return nil, false
	}
	return o.BaiduName, true
}

// HasBaiduName returns a boolean if a field has been set.
func (o *Uinforesponse) HasBaiduName() bool {
	if o != nil && o.BaiduName != nil {
		return true
	}

	return false
}

// SetBaiduName gets a reference to the given string and assigns it to the BaiduName field.
func (o *Uinforesponse) SetBaiduName(v string) {
	o.BaiduName = &v
}

// GetNetdiskName returns the NetdiskName field value if set, zero value otherwise.
func (o *Uinforesponse) GetNetdiskName() string {
	if o == nil || o.NetdiskName == nil {
		var ret string
		return ret
	}
	return *o.NetdiskName
}

// GetNetdiskNameOk returns a tuple with the NetdiskName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uinforesponse) GetNetdiskNameOk() (*string, bool) {
	if o == nil || o.NetdiskName == nil {
		return nil, false
	}
	return o.NetdiskName, true
}

// HasNetdiskName returns a boolean if a field has been set.
func (o *Uinforesponse) HasNetdiskName() bool {
	if o != nil && o.NetdiskName != nil {
		return true
	}

	return false
}

// SetNetdiskName gets a reference to the given string and assigns it to the NetdiskName field.
func (o *Uinforesponse) SetNetdiskName(v string) {
	o.NetdiskName = &v
}

// GetVipType returns the VipType field value if set, zero value otherwise.
func (o *Uinforesponse) GetVipType() int32 {
	if o == nil || o.VipType == nil {
		var ret int32
		return ret
	}
	return *o.VipType
}

// GetVipTypeOk returns a tuple with the VipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uinforesponse) GetVipTypeOk() (*int32, bool) {
	if o == nil || o.VipType == nil {
		return nil, false
	}
	return o.VipType, true
}

// HasVipType returns a boolean if a field has been set.
func (o *Uinforesponse) HasVipType() bool {
	if o != nil && o.VipType != nil {
		return true
	}

	return false
}

// SetVipType gets a reference to the given int32 and assigns it to the VipType field.
func (o *Uinforesponse) SetVipType(v int32) {
	o.VipType = &v
}

func (o Uinforesponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Errno != nil {
		toSerialize["errno"] = o.Errno
	}
	if o.Errmsg != nil {
		toSerialize["errmsg"] = o.Errmsg
	}
	if o.Uk != nil {
		toSerialize["uk"] = o.Uk
	}
	if o.RequestId != nil {
		toSerialize["request_id"] = o.RequestId
	}
	if o.AvatarUrl != nil {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if o.BaiduName != nil {
		toSerialize["baidu_name"] = o.BaiduName
	}
	if o.NetdiskName != nil {
		toSerialize["netdisk_name"] = o.NetdiskName
	}
	if o.VipType != nil {
		toSerialize["vip_type"] = o.VipType
	}
	return json.Marshal(toSerialize)
}

type NullableUinforesponse struct {
	value *Uinforesponse
	isSet bool
}

func (v NullableUinforesponse) Get() *Uinforesponse {
	return v.value
}

func (v *NullableUinforesponse) Set(val *Uinforesponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUinforesponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUinforesponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUinforesponse(val *Uinforesponse) *NullableUinforesponse {
	return &NullableUinforesponse{value: val, isSet: true}
}

func (v NullableUinforesponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUinforesponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
